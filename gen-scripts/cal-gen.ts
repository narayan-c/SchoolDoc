// a function that takes an year as input and generates a calendar from 1st april of that year to 31st march of the next year.
// The function should return a json array of objects with the following structure:
// {
//     "month": "April",
//     "year": 2021,
//     "days": [
//         {
//             "date": 1,
//             "day": "Thursday"
//         },
//         {
//             "date": 2,
//             "day": "Friday"
//         }
//     ]
// }
// The days should be in the order of Sunday to Saturday.

import { readSheet } from "./sheet-reader";
import * as fs from 'fs';

function dumpCalendarToFile(calendar: any[], filename: string = 'calendar.js') {
    const data = "export const calendar = " + JSON.stringify(calendar, null, 2);
    fs.writeFile(filename, data, (err) => {
        if (err) {
            console.error('Error writing file:', err);
        } else {
            console.log('File written successfully');
        }
    });
}
function generateCalendar(year: number) {
    const dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    let calendar = [];

    for (let month = 3; month < 15; month++) {
        let monthIndex = month % 12;
        let yearOffset = Math.floor(month / 12);
        let days = [];
        let date = new Date(year + yearOffset, monthIndex, 1);
        while (date.getMonth() === monthIndex) {
            let day = {
                "date": date.getDate(),
                "day": dayNames[date.getDay()]
            };
            // Add eventType field if the day is Sunday
            if (day.day === "Sunday") {
                day["eventtype"] = "Holiday";
            }
            days.push(day);
            date.setDate(date.getDate() + 1);
        }
        calendar.push({
            "month": monthNames[monthIndex],
            "year": year + yearOffset,
            "days": days
        });
    }

    return calendar;
}

// write a function that pretty prints the calendar generated by the above function.
function prettyPrintCalendar(calendar: any[]) {
    for (const month of calendar) {
        console.log(`${month.month} ${month.year}`);
        for (const day of month.days) {
            console.log(JSON.stringify(day, null, 2));
        }
        console.log();
    }
}

// read the event list from the google sheet and generate the calendar for the current academic year.
let sheetname = 'Events';
const spreadsheetId = "1cxILQdkt-1D-KXAFw4w_CrkWHLJCa2yMmiPS9tTp_i0";

console.log('running..');
readSheet(spreadsheetId, `${sheetname}!E:G`).then((values) => {
    let calendar = generateCalendar(2024);
    //values is a json object array. Every object has a field called date which is a string of the form 15th November, 6th December representing one date and of the form 
    // 15 August - 21 August representing a range of dates.
    // Enhance calendar object with the events from the sheet which are present for particular date or date range in the values object.
    function parseDate(dateStr: string): Date {
        // Parse a date string of the form '15th November'
        let [dayStr, monthStr] = dateStr.split(' ');
        let day = parseInt(dayStr);
        let month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"].indexOf(monthStr);
        return new Date(2024, month, day); // assuming the year is 2024
    }

    function addEventToCalendar(calendar: any[], date: Date, event: any) {
        let eventname = event.event;
        let eventtype = event.eventtype;
        // Find the month and day in the calendar and add the event
        // Convert integer month to string month
        const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        let monthName = monthNames[date.getMonth()];

        let month = calendar.find(m => m.month === monthName);
        if (month) {
            let day = month.days.find(d => d.date === date.getDate());
            if (day) {
                day.eventname = eventname;
                day.eventtype = eventtype;
            } else {
                console.error(`Day ${date.getDate()} ${date.getMonth()} ${date.getFullYear()} not found in calendar`);
            }
        } else {
            console.error(`Month ${date.getMonth()} ${date.getFullYear()} not found in calendar`);
        
        }
    }
    function prettyPrintCalendar(calendar: any[]) {
        for (const month of calendar) {
            console.log(JSON.stringify(month, null, 2));
        }
    }
    values.forEach(value => {
        let dateStr = value.date;

        // Check if the date string represents a range
        if (dateStr.includes('-')) {
            let [startStr, endStr] = dateStr.split('-').map(s => s.trim());
            let startDate = parseDate(startStr);
            let endDate = parseDate(endStr);

            // Add the event to all dates in the range
            for (let date = startDate; date <= endDate; date.setDate(date.getDate() + 1)) {
                addEventToCalendar(calendar, new Date(date), value);
            }
        } else {
            let date = parseDate(dateStr);
            addEventToCalendar(calendar, date, value);
        }
    });
    // after events are added to the calendar, extend the caldnear such that for every object representing the month in the calendar add a field called working days
    // where count the number of days which are not holidays, not PTM, not Celebration, not Exam.
    function countWorkingDays(days: any[]) {
        return days.filter(day => !["Holiday", "PTM", "Celebration", "Exam"].includes(day.eventtype)).length;
    }
    for (let month of calendar) {
        month.workingdays = countWorkingDays(month.days);
    } 
    // I want to dump the calendar as javascript object to a file called academic-calendar.js file
    

     //console.log(calendar)
    prettyPrintCalendar(calendar);
    dumpCalendarToFile(calendar);
});

